/*
 * DO NOT EDIT. THIS FILE IS AUTOGENERATED BY prehook.
 *
 * Edit up-header.sql, up-footer.sql or up-functions.sql instead.
 */
create extension if not exists plv8;

create table if not exists plv8_sources (
  filename text,
  code text
);

-- insert source so assert can give meaningful code context
\set code `cat /tmp/bundle.js`
delete from plv8_sources where filename = 'plv8_startup';
insert into plv8_sources
  (filename, code)
values
  ('plv8_startup', :'code');

create or replace function plv8_startup() returns void as $PLV8$
  // resets App global context properties
  var global = (function(){ return this; }).call(null);
  delete global.App;
  delete global.require;
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util');

function Console(stdout, stderr) {
  if (!(this instanceof Console)) {
    return new Console(stdout, stderr);
  }
  if (!stdout || !util.isFunction(stdout.write)) {
    throw new TypeError('Console expects a writable stream instance');
  }
  if (!stderr) {
    stderr = stdout;
  }
  var prop = {
    writable: true,
    enumerable: false,
    configurable: true
  };
  prop.value = stdout;
  Object.defineProperty(this, '_stdout', prop);
  prop.value = stderr;
  Object.defineProperty(this, '_stderr', prop);
  prop.value = {};
  Object.defineProperty(this, '_times', prop);

  // bind the prototype functions to this Console instance
  Object.keys(Console.prototype).forEach(function(k) {
    this[k] = this[k].bind(this);
  }, this);
}

Console.prototype.log = function() {
  this._stdout.write(util.format.apply(this, arguments) + '\n');
};


Console.prototype.info = Console.prototype.log;


Console.prototype.warn = function() {
  this._stderr.write(util.format.apply(this, arguments) + '\n');
};


Console.prototype.error = Console.prototype.warn;


Console.prototype.dir = function(object) {
  this._stdout.write(util.inspect(object, { customInspect: false }) + '\n');
};


Console.prototype.time = function(label) {
  this._times[label] = Date.now();
};


Console.prototype.timeEnd = function(label) {
  var time = this._times[label];
  if (!time) {
    throw new Error('No such label: ' + label);
  }
  var duration = Date.now() - time;
  this.log('%s: %dms', label, duration);
};


Console.prototype.trace = function() {
  // TODO probably can to do this better with V8's debug object once that is
  // exposed.
  var err = new Error;
  err.name = 'Trace';
  err.message = util.format.apply(this, arguments);
  Error.captureStackTrace(err, arguments.callee);
  this.error(err.stack);
};


Console.prototype.assert = function(expression) {
  if (!expression) {
    var arr = Array.prototype.slice.call(arguments, 1);
    require('assert').ok(false, util.format.apply(this, arr));
  }
};

module.exports = new Console(process.stdout, process.stderr);
module.exports.Console = Console;

}).call(this,require("/Users/roberto/proyectos/3vot/3vot-api/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))
},{"/Users/roberto/proyectos/3vot/3vot-api/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":18,"assert":14,"util":20}],2:[function(require,module,exports){
(function (process){
var MAX_MSG_SIZE = 1000; // gibberish at 2009

process.stdout = {
  /**
   * Large messages confuses logging. A messsage of 2078 was displaying random
   * characters.
   */
  write: function(s) {
    if (!s) return;

    var start = 0, L = s.length;
    while (start < L) {
      plv8.elog(LOG, s.slice(start, start + Math.min(L - start, MAX_MSG_SIZE)));
      start += MAX_MSG_SIZE;
    }
  }
};

process.stderr = {
  write: function(s) {
    var start = 0, L = s.length;
    while (start < L) {
      plv8.elog(WARNING, s.slice(start, start + Math.min(L - start, MAX_MSG_SIZE)));
      start += MAX_MSG_SIZE;
    }
  }
};

module.exports = require('./console');


}).call(this,require("/Users/roberto/proyectos/3vot/3vot-api/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"))
},{"./console":1,"/Users/roberto/proyectos/3vot/3vot-api/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":18}],3:[function(require,module,exports){
var __slice = [].slice;

var cache = {};

var LogLevel = {
  DEBUG1: 9,
  DEBUG: 10,
  LOG: 20,
  INFO: 30,
  NOTICE: 40,
  WARNING: 49,
  WARN: 50,
  ERROR: 60
};

var _level = 'NOTICE';

function noop(){};

function Logger(name, level) {
  this.name = name;
  this.setLevel(level);
}

Logger.prototype.setLevel = function(level) {
  if ((this.level != null) === level) {
    return;
  }
  var levelNum = LogLevel[level];
  if (levelNum) {
    this.level = level;
  } else {
    this.level = _level;
    levelNum = LogLevel[_level];
  }

  var self = this;

  function makeFunc(flag, method, logLevel, pgLEVEL) {
    self[flag] = logLevel >= levelNum;
    if (flag) {
      self[method] = function() {
        var args, message;
        message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return plv8.elog.apply(plv8, [pgLEVEL, self.name + " " + message].concat(__slice.call(args)));
      };
    } else {
      self[method] = noop;
    }
  }

  // this.isDebug = LogLevel.DEBUG >= levelNum;
  // if (this.isDebug) {
  //   this.debug = function() {
  //     var args, message;
  //     message = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  //     return plv8.elog.apply(plv8, [DEBUG1, this.name + " " + message].concat(__slice.call(args)));
  //   };
  // } else {
  //   this.debug = noop;
  // }

  makeFunc("isDebug", "debug", LogLevel.DEBUG, DEBUG1);
  makeFunc("isLog", "log", LogLevel.LOG, LOG);
  makeFunc("isInfo", "info", LogLevel.INFO, INFO);
  makeFunc("isNotice", "notice", LogLevel.NOTICE, NOTICE);
  makeFunc("isWarn", "warn", LogLevel.WARN, WARNING);
  makeFunc("isError", "error", LogLevel.ERROR, ERROR);
  return this;
};

exports.setLevel = function(level) {
  var k, logger;
  if (!level || LogLevel[level] < 0) {
    plv8.elog(NOTICE, 'Invalid log level "' + level + '"');
    return;
  }

  _level = level;
  for (k in cache) {
    logger = cache[k];
    logger.setLevel(level);
  }
};

exports.getLogger = function(name, level) {
  if (!level) {
    level = _level;
  }
  if (LogLevel[level] < 0) {
    plv8.elog(NOTICE, 'Invalid log level "' + level + '"');
    return;
  }

  var logger = cache[name];
  if (logger) {
    logger.setLevel(level);
  } else {
    logger = new Logger(name, level);
    cache[name] = logger;
  }
  return logger;
};


},{}],4:[function(require,module,exports){
var options = require('./options');
var util = require('../util');
var Runner = require('./runner');

var runner = new Runner();
module.exports = runner.add.bind(runner);

module.exports.run = runner.run.bind(runner);

/**
 * Add global var exclusions, used by `checkGlobals`
 */
module.exports.addGlobals = function(arr) {
  options.globals = options.globals.concat(arr);
};

/**
 * Extend options.
 */
module.exports.options = function(opts) {
  if (arguments.length === 1) {
    util.extend(options, opts);
    if (options.colorful) {
      var colors = require('mgutz-colors');
      options.passColor = colors.fn('green');
      options.failColor = colors.fn('red');
      options.headerColor = colors.fn('cyan');
    }
  } else {
    return options;
  }
}

},{"../util":12,"./options":5,"./runner":6,"mgutz-colors":9}],5:[function(require,module,exports){
module.exports = {
  // known globals used to determin leaks
  globals: [
    'DEBUG5',
    'DEBUG4',
    'DEBUG3',
    'DEBUG2',
    'DEBUG1',
    'DEBUG',
    'LOG',
    'INFO',
    'NOTICE',
    'WARNING',
    'ERROR',
    'plv8'
  ],

  // whether to use ANSI escape color codes when logging
  colorful: false,

  // used to get actual source in stack traces
  sourceLineOffset: 0,

  // number of code lines before and after the current statement
  // in stack traces
  contextLines: 2
};


},{}],6:[function(require,module,exports){
var suite = require('./suite');
var IGNORE = '#';
var PENDING = '_';
var ONLY = '+';
var Nimble = require('../vendor/nimble');

function Runner(suites) {
  this.suites = [];
}

Runner.prototype.add = function(name) {
  this.suites.push({ name: name, args: Array.prototype.slice.apply(arguments)});
  return this;
};

Runner.prototype.run = function() {
  var i, testSuite;
  var set = [];
  var subset = [];
  for (i = 0; i < this.suites.length; i++) {
    testSuite = this.suites[i];
    var name = testSuite.name;
    if (name[0] === ONLY) {
      subset.push(testSuite);
    } else {
      set.push(testSuite);
    }
  }

  if (subset.length > 0) {
    set = subset;
  }

  Nimble.eachSeries(set, function(testSuite, cb) {
    testSuite.args.push(cb);
    suite.run.apply(suite, testSuite.args);
  }, function(err) {
    if (err) console.log(err.toString());
  });
};


module.exports = Runner;

},{"../vendor/nimble":13,"./suite":8}],7:[function(require,module,exports){
/**
 * Module dependencies.
 */
var options = require('./options');
var isPlv8 = typeof plv8 !== 'undefined';

/**
 * Expose `assert`.
 */

var codeLines;

function parseStack(stack) {
  var i, line, lines = stack.split('\n');
  var rex = /([^\(]+)\(([^:]+):(\d+):(\d+)/;
  var matches;

  line = lines[0];
  var result = [line];
  for (i = 1; i < lines.length; i++) {
    line = lines[i];
    matches = line.match(rex);
    if (matches) {
      result.push({
        location: matches[1].trim(),
        filename: matches[2],
        lineno: parseInt(matches[3], 10),
        colno: parseInt(matches[4], 10)
      })
    }
  }

  return result;
}


function get__filename(lineno, defaultValue) {
  var codeLines = loadCodeLines();
  var line, matches;
  var filenameRegex = /__filename="\/([^"]+)/;
  while (lineno >= 0) {
    line = codeLines[lineno];
    matches = line.match(filenameRegex);
    if (matches) return matches[1];
    lineno--;
  }

  return defaultValue;
}


function getCodeContext(filename, lineno, colno, n) {
  var codeLines = loadCodeLines(filename);
  var i, line, msg = "";
  var start = Math.max(0, lineno - n);
  //var end = Math.min(lineno + n, codeLines.length);
  var end = Math.min(lineno+1, codeLines.length);

  for (i = start; i < end; i++) {
    line = codeLines[i];
    if (line.length > 256) continue;

    msg += i === lineno ?  '  ⇢   ' : '      ';
    msg += line.slice(0, 74) + '\n';
  }
  return msg;
}

function loadCodeLines(filename) {
  if (isPlv8) {
    if (!codeLines) {
      var code = plv8.__executeScalar("select code from plv8_sources where filename = 'plv8_startup'");
      codeLines = code.split('\n');
    }
    return codeLines;
  }
  return null;
}

/**
 * Creates a pretty stack trace.
 */
exports.stackTrace = function stackTrace(istack) {
  var stack = parseStack(istack);
  console.dir(stack);
  var addLine, filename, call, msg = '';
  for (var i = 0, L = stack.length; i < L; i++) {
    call = stack[i];
    msg += '\n';

    if (call.filename === '<anonymous>') {
      // ignore
    } else if (call.location) {
      var lineno = (isPlv8) ? call.lineno  - options.sourceLineOffset : call.lineno;
      if (lineno < 1) continue;

      //line = codeLines[lineno];
      filename = get__filename(lineno, call.filename);

      msg += '  ' + call.location + ' (' + filename + ':' + call.lineno + ':' + call.colno + ')';
      var codeContext = getCodeContext(filename, lineno, call.colno, options.contextLines);
      if (codeContext) {
        msg += '\n';
        msg += codeContext;
      }
    } else {
      msg += call;
    }
  }

  //console.log('msg', msg);
  return { stack: stack, message: msg };
}


function dumpSource(lineno, contextLines) {
  if (!contextLines || contextLines < 1) contextLines = options.contextLines;

  lineno = lineno - options.sourceLineOffset;
  if (lineno < 1) return console.error('Argument lineno too small');
  var code = getCodeContext(lineno, contextLines);
  var filename = get__filename(lineno, "<__filename not found>");
  var message = '\nFilename: ' + filename + '\n' + code;
  console.log(message);
}

exports.dumpSource = dumpSource;

if (isPlv8) {
  plv8.__dumpSource = dumpSource;
}



},{"./options":5}],8:[function(require,module,exports){
var options = require('./options');
var util = require('../util');
var stackTrace = require('./stackTrace').stackTrace;
var AssertionError = require('assert').AssertionError;
var Nimble = require('../vendor/nimble');

// these are set only if options.colorful(true) is called
var IGNORE = '#';
var PENDING = '_';
var ONLY = '+';
var runner = require('./runner');

function checkGlobals(moreGlobals) {
  var global = (function(){ return this; }).call(null);
  var allGlobals = options.globals.concat(moreGlobals);
  var summary = [];
  Object.keys(global).forEach(function(p) {
    if (allGlobals.indexOf(p) < 0) {
      summary.push(p);
    }
  });
  return summary;
};

function gatherTestCases(tests) {
  var name, fn;
  var before, after;
  var subset = [];
  var set = [];
  if (typeof tests === 'function') {
    set.push({name: '(anonymous)', fn: tests});
  } else {
    for (name in tests) {
      fn = tests[name];
      if (name === 'before') {
        before = fn;
      } else if (name === 'after') {
        after = fn;
      } else if (name[0] === ONLY) {
        subset.push({name: name, fn: tests[name]});
      } else if (name[0] === IGNORE) {
        continue;
      } else {
        set.push({name: name, fn: tests[name]});
      }
    }
  }

  if (subset.length > 0) set = subset;
  if (before) {
    set.unshift({name: 'before', fn: before});
  }
  if (after) {
    set.push({name: 'after', fn: after});
  }
  return set;
}

exports.run = function(group, tests, cb) {
  if (group[0] === IGNORE) return;
  var opts = {};
  var pendingGroup;
  if (group[0] === PENDING) {
    pendingGroup = true;
    group = '(PENDING) ' + group.slice(1);
  }

  var summary = ['', options.colorful ?  options.headerColor(group) : group];

  if (pendingGroup) {
    console.log(summary.join('\n'));
    return;
  }

  var set = gatherTestCases(tests);
  var ran = 0, pending = 0, name, message;

  Nimble.eachSeries(set, function(test, cb) {
    function next(fn) {
      function done(err) {
        if (err) return cb(err);
        if (options.colorful) {
          var last = summary[summary.length - 1];
          summary[summary.length-1] = options.passColor(last);
        }
        cb();
      }
      if (fn) {
        try {
          if (fn.length === 1) {
            fn(done);
          } else {
            fn();
            done();
          }
        } catch(e) {
          done(e);
        }
      } else {
        done();
      }
    }

    name = test.name;
    var testCase = test.fn;
    if (name[0] === PENDING) {
      summary.push('  - (PENDING) ' + name.slice(1));
      pending += 1;
      next();
    } else if (!testCase) {
      summary.push('  - (PENDING) ' + name);
      pending += 1;
      next();
    } else if (name[0] === ONLY) {
      summary.push('  - ' + name.slice(1));
      ran += 1;
      next(testCase);
    } else if (name === 'before' || name === 'after') {
      next(testCase);
    } else {
      summary.push('  - ' + name);
      ran += 1;
      next(testCase);
    }

  }, function(err) {
    if (err) {
      if (err.stack) {
        message = stackTrace(err.stack).message;
      } else {
        message = err.toString();
      }

      if (options.colorful) {
        var last = summary[summary.length - 1];
        summary[summary.length-1] = options.failColor(last);
        summary.push(options.failColor(message));
      } else {
        summary.push(message);
      }
    } else {
      message = '  ran ' + ran + ' specs';
      if (pending > 0) message += ' (' + pending + ' pending)';
      summary.push(message);

      var leaks = checkGlobals(opts.globals);
      if (leaks.length > 0) {
        leaks = '\nGlobal variable leaks: ' + leaks.join(', ');
        summary.push(options.colorful ? options.failColor(leaks) : leaks);
      }
    }
    console.log(summary.join('\n'));
    cb();
  });

};




},{"../util":12,"../vendor/nimble":13,"./options":5,"./runner":6,"./stackTrace":7,"assert":14}],9:[function(require,module,exports){
/*============================================================================
 * Copyright(c) 2010 Mario L Gutierrez <mario@mgutz.com>
 * MIT Licensed
 *==========================================================================*/

module.exports = require('./lib/colors');

},{"./lib/colors":10}],10:[function(require,module,exports){
/*============================================================================
 * Copyright(c) 2012 Mario L Gutierrez <mario@mgutz.com>
 * MIT Licensed
 *==========================================================================*/

/* Whether to disable colors. */
exports.plain = false;

var reset = exports.reset = "\033[0m"; // reset colors

function ansiCode(style) {
  if (exports.plain) return '';

  var colors = {
    black: 0,
    red: 1,
    green: 2,
    yellow: 3,
    blue: 4,
    magenta: 5,
    cyan: 6,
    white: 7
  };

  var fgIntensity = {
    normal: 30,
    high: 90
  }

  var bgIntensity = {
    normal: 40,
    high: 100
  };

  var decoration = {
    bold: '1;',
    underline: '4;'
  };

  var foreground_background = style.split(':');
  var foreground = foreground_background[0].split('+');
  var fg = foreground[0];
  var fgStyle = foreground[1];

  var background = 0, bg = 0, bgStyle = '';
  if (foreground_background[1]) {
    background = foreground_background[1].split('+');
    bg = background[0];
    bgStyle = background[1];
  }

  var code = '\033[';
  var base = fgIntensity.normal;

  if (fgStyle) {
    if (fgStyle.indexOf('b') >= 0) code += decoration.bold;
    if (fgStyle.indexOf('u') >= 0) code += decoration.underline;
    base = fgStyle.indexOf('h') >= 0 ? fgIntensity.high : fgIntensity.normal;
  }
  code += (base + colors[fg]).toString() + ';';

  var base = 0;
  if (bg) {
    base = (bgStyle && bgStyle === 'h') ? bgIntensity.high : bgIntensity.normal;
    code += (base + colors[bg]).toString() + ';';
  }

  code = code.slice(0, -1) + 'm'; // remove last ';'


  return code;
}
exports.ansi = ansiCode;

/**
 * Colorizes string. To disable colors, set `colors.plain = true`
 *
 * @param {String} style Style format.
 *
 * format:
 *   color+attributes:bgColor+attributes
 *
 * color:
 *   black
 *   red
 *   green
 *   yellow
 *   blue
 *   magenta
 *   cyan
 *   white
 *
 * attributes:
 *   b = bold
 *   h = high intensity
 *   u = underline
 *
 * @example
 *   color("...", "red")            -> red
 *   color("...", "red+b")          -> red bold
 *   color("...", "red+u")          -> red underline
 *   color("...", "red+bh")         -> red bold high-intensity
 *   color("...", "red:white")      -> red on white
 *   color("...", "red+b:white+h")  -> red bold on white high-intensity
 *
 */
var color = exports.color = function(s, style) {
  if (exports.plain || !style) return s;
  return ansiCode(style) + s + reset;
};


/**
  Define a color function.
 *
 * @param {String} style The style format.
 */
exports.fn = function(style) {
  var ansi = ansiCode(style);
  return function(s) {
    if (exports.plain || !s) return s;
    return ansi + s + reset;
  }
};


},{}],11:[function(require,module,exports){
/**
 * plv8Fill - Adds extra methods to plv8. All methods are prefixed with '__'
 * to reduce possibility of conflict.
 */

/**
 * Trace SQL queries if client_min_messages starts with 'debug'.
 */
var DEBUG;
(function() {
  var rows = plv8.execute("select setting from pg_settings where name='client_min_messages'");
  DEBUG = rows[0].setting.indexOf('debug') === 0;
})();



/**
 * Wraps logging around plv8.execute.
 *
 * client_min_messages must be {debug1, ..., debug5}
 */
function __execute(sql, args) {
  if (DEBUG) {
    console.log('plv8.__execute\n', sql , args ? args : '');
  }

  return plv8.execute.apply(plv8, arguments);
};

plv8.__execute = __execute;
plv8.__executeRows = __execute;


/**
 * Executes `sql` with an `args` array, returning a scalar value.
 */
plv8.__executeScalar = function(sql, args) {
  //var result = plv8.execute.apply(plv8, arguments);
  var result = __execute.apply(null, arguments);
  var L = result.length;
  if (L === 1)  {
    var row = result[0];
    for (var scalarKey in row) break;
    return row[scalarKey];
  } else if (L === 0) {
    return null;
  } else {
    throw new Error('Expected single row, query returned multiple rows');
  }
};


/**
 * Executes `sql` with an `args` array, returning a single row.
 */
plv8.__executeRow = function(sql, args) {
  var result = __execute.apply(null, arguments);
  var L = result.length;
  if (L === 1)  {
    return result[0];
  } else if (L === 0) {
    return null;
  } else {
    throw new Error('Expected single row, query returned multiple rows');
  }
}


/**
 * Executes a command which returns the affected records like an update.
 */
plv8.__executeCommand = function(sql, args) {
  var result = __execute.apply(null, arguments);
  if (typeof result === 'number') {
    return result;
  } else {
    throw new Error('Expected single number value of records affected');
  }
}


/**
 * Dumps plv8's global context.
 */
plv8.__dumpGlobal = function() {
  var globals = [];
  var k, global = (function(){return this;})(null);
  for (k in global) {
    globals.push(k);
  }
  var summary = ['\n', 'Globals', '-------'].concat(globals.sort()).join('\n');
  plv8.elog(LOG, summary);
}


// !!!
// `plv8.__dumpSource` is added by microspec/stackTrace and should only
// be used while unit testing


},{}],12:[function(require,module,exports){
/**
 * Gets the global context.
 */
exports.getGlobal = function() {
  return (function() { return this; })(null);
};


exports.extend = function(object) {
    // Takes an unlimited number of extenders.
    var args = Array.prototype.slice.call(arguments, 1);

    // For each extender, copy their properties on our object.
    for (var i = 0, source; source = args[i]; i++) {
        if (!source) continue;
        for (var property in source) {
            object[property] = source[property];
        }
    }

    return object;
};


},{}],13:[function(require,module,exports){
/**
 * Nimble
 * Copyright (c) 2011 Caolan McMahon
 *
 * Nimble is freely distributable under the MIT license.
 *
 * This source code is optimized for minification and gzip compression, not
 * readability. If you want reassurance, see the test suite.
 */

var keys = Object.keys;

var fallback = function (name, fallback) {
    var nativeFn = Array.prototype[name];
    return function (obj, iterator, memo) {
        var fn = obj ? obj[name]: 0;
        return fn && fn === nativeFn ?
            fn.call(obj, iterator, memo):
            fallback(obj, iterator, memo);
    };
};

var eachSync = fallback('forEach', function (obj, iterator) {
    var isObj = obj instanceof Object;
    var arr = isObj ? keys(obj): (obj || []);
    for (var i = 0, len = arr.length; i < len; i++) {
        var k = isObj ? arr[i]: i;
        iterator(obj[k], k, obj);
    }
});

var eachParallel = function (obj, iterator, callback) {
    var len = obj.length || keys(obj).length;
    if (!len) {
        return callback();
    }
    var completed = 0;
    eachSync(obj, function () {
        var cb = function (err) {
            if (err) {
                callback(err);
                callback = function () {};
            }
            else {
                if (++completed === len) {
                    callback();
                }
            }
        };
        var args = Array.prototype.slice.call(arguments);
        if (iterator.length) {
            args = args.slice(0, iterator.length - 1);
            args[iterator.length - 1] = cb;
        }
        else {
            args.push(cb);
        }
        iterator.apply(this, args);
    });
};

var eachSeries = function (obj, iterator, callback) {
    var keys_list = keys(obj);
    if (!keys_list.length) {
        return callback();
    }
    var completed = 0;
    var iterate = function () {
        var k = keys_list[completed];
        var args = [obj[k], k, obj].slice(0, iterator.length - 1);
        args[iterator.length - 1] = function (err) {
            if (err) {
                callback(err);
                callback = function () {};
            }
            else {
                if (++completed === keys_list.length) {
                    callback();
                }
                else {
                    iterate();
                }
            }
        };
        iterator.apply(this, args);
    };
    iterate();
};

var mapSync = fallback('map', function (obj, iterator) {
    var results = [];
    eachSync(obj, function (v, k, obj) {
        results[results.length] = iterator(v, k, obj);
    });
    return results;
});

var mapAsync = function (eachfn) {
    return function (obj, iterator, callback) {
        var results = [];
        eachfn(obj, function (value, i, obj, callback) {
            var cb = function (err, v) {
                results[results.length] = v;
                callback(err);
            };
            var args = [value, i, obj];
            if (iterator.length) {
                args = args.slice(0, iterator.length - 1);
                args[iterator.length - 1] = cb;
            }
            else {
                args.push(cb);
            }
            iterator.apply(this, args);
        }, function (err) {
            callback(err, results);
        });
    };
};

var filterSync = fallback('filter', function (obj, iterator, callback) {
    var results = [];
    eachSync(obj, function (v, k, obj) {
        if (iterator(v, k, obj)) {
            results[results.length] = v;
        }
    });
    return results;
});

var filterParallel = function (obj, iterator, callback) {
    var results = [];
    eachParallel(obj, function (value, k, obj, callback) {
        var cb = function (err, a) {
            if (a) {
                results[results.length] = value;
            }
            callback(err);
        };
        var args = [value, k, obj];
        if (iterator.length) {
            args = args.slice(0, iterator.length - 1);
            args[iterator.length - 1] = cb;
        }
        else {
            args.push(cb);
        }
        iterator.apply(this, args);
    }, function (err) {
        callback(err, results);
    });
};

var reduceSync = fallback('reduce', function (obj, iterator, memo) {
    eachSync(obj, function (v, i, obj) {
        memo = iterator(memo, v, i, obj);
    });
    return memo;
});

var reduceSeries = function (obj, iterator, memo, callback) {
    eachSeries(obj, function (value, i, obj, callback) {
        var cb = function (err, v) {
            memo = v;
            callback(err);
        };
        var args = [memo, value, i, obj];
        if (iterator.length) {
            args = args.slice(0, iterator.length - 1);
            args[iterator.length - 1] = cb;
        }
        else {
            args.push(cb);
        }
        iterator.apply(this, args);
    }, function (err) {
        callback(err, memo);
    });
};

exports.each = function (obj, iterator, callback) {
    return (callback ? eachParallel: eachSync)(obj, iterator, callback);
};
exports.map = function (obj, iterator, callback) {
    return (callback ? mapAsync(eachParallel): mapSync)(obj, iterator, callback);
};
exports.filter = function (obj, iterator, callback) {
    return (callback ? filterParallel: filterSync)(obj, iterator, callback);
};
exports.reduce = function (obj, iterator, memo, callback) {
    return (callback ? reduceSeries: reduceSync)(obj, iterator, memo, callback);
};


exports.eachSeries = eachSeries;

exports.parallel = function (fns, callback) {
    var results = new fns.constructor();
    eachParallel(fns, function (fn, k, cb) {
        fn(function (err) {
            var v = Array.prototype.slice.call(arguments, 1);
            results[k] = v.length <= 1 ? v[0]: v;
            cb(err);
        });
    }, function (err) {
        (callback || function () {})(err, results);
    });
};

exports.series = function (fns, callback) {
    var results = new fns.constructor();
    eachSeries(fns, function (fn, k, cb) {
        fn(function (err, result) {
            var v = Array.prototype.slice.call(arguments, 1);
            results[k] = v.length <= 1 ? v[0]: v;
            cb(err);
        });
    }, function (err) {
        (callback || function () {})(err, results);
    });
};

},{}],14:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":16}],15:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],16:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require("/Users/roberto/proyectos/3vot/3vot-api/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":15,"/Users/roberto/proyectos/3vot/3vot-api/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":18,"inherits":17}],17:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],18:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],19:[function(require,module,exports){
module.exports=require(15)
},{}],20:[function(require,module,exports){
module.exports=require(16)
},{"./support/isBuffer":19,"/Users/roberto/proyectos/3vot/3vot-api/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js":18,"inherits":17}],21:[function(require,module,exports){
var create, query;

query = "INSERT INTO apps (name, profile_id, version,version_details, marketing, sales, billing, events) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id";

create = function(app) {
  var sqlResponse;
  sqlResponse = plv8.__execute(query, [app.name, app.profile_id, 1, app.version_details, app.marketing, app.sales, app.billing, app.events]);
  app.version = 1;
  app.id = sqlResponse[0].id;
  return app;
};

module.exports = create;

module.exports.query = query;


},{}],22:[function(require,module,exports){
var query, update;

query = "UPDATE apps set version= version + 1, version_details= $1, marketing= $2, sales= $3, billing= $4, events= $5 where name = $6 returning version";

update = function(app) {
  var sqlResponse;
  sqlResponse = plv8.__execute(query, [app.version_details, app.marketing, app.sales, app.billing, app.events, app.name]);
  app.version = sqlResponse[0].version;
  return app;
};

module.exports = update;

module.exports.query = query;


},{}],23:[function(require,module,exports){
var adjustOpenSourceCost, fakeDate, getCostInCredits, getTodayInFormat, proRateCost;

fakeDate = null;

getCostInCredits = (function(_this) {
  return function(app) {
    var constants, costInCredits;
    constants = require("../").constants;
    costInCredits = 0;
    if (app.billing.size === "small") {
      costInCredits = constants.SMALL_APP_COST;
    } else if (app.billing.size === "regular") {
      costInCredits = constants.REGULAR_APP_COST;
    } else {
      costInCredits = constants.LARGE_APP_COST;
    }
    return adjustOpenSourceCost(app, costInCredits);
  };
})(this);

proRateCost = function(cost) {
  var prorate, today;
  if (fakeDate) {
    today = new Date(fakeDate).getDate();
  } else {
    today = new Date().getDate();
  }
  prorate = 1;
  if (today >= 24) {
    prorate = 0.25;
  } else if (today >= 15 && today < 24) {
    prorate = 0.5;
  }
  if (today > 7 && today < 15) {
    prorate = 0.75;
  }
  return cost * prorate;
};

adjustOpenSourceCost = function(app, costInCredits) {
  var constants;
  constants = require("../").constants;
  if (!app.sales["private"]) {
    costInCredits = costInCredits * constants.OPEN_SOURCE_DISCOUNT;
  }
  return costInCredits;
};

getTodayInFormat = function() {
  var curr_date, curr_month, curr_year, d;
  d = new Date();
  curr_date = d.getDate();
  curr_month = d.getMonth() + 1;
  curr_year = d.getFullYear();
  return curr_date + "-" + curr_month + "-" + curr_year;
};

module.exports = function(app) {
  var costInCredits, proRatedCost;
  if (app.old && !app.sizeIncreased && !app.sizeReduced) {
    return app;
  }
  fakeDate = app.fakeDate;
  costInCredits = Math.round(getCostInCredits(app));
  proRatedCost = Math.round(proRateCost(costInCredits));
  app.proRatedCost = proRatedCost;
  app.billing.cost = costInCredits;
  app.billing.last_cost = proRatedCost;
  return app;
};


},{"../":32}],24:[function(require,module,exports){
module.exports = function(apps, monthly) {
  var app, appCharge, billingApps, chargeAmount, chargeEvent, profile_id, query, reason, substractFrom, updateResponse, values, _i, _len;
  if (monthly == null) {
    monthly = true;
  }
  chargeAmount = 0;
  billingApps = {};
  profile_id = null;
  substractFrom = monthly ? "credits_to_reload" : "credits";
  reason = monthly ? "Monthly Subscription of Apps" : "First Creation of App";
  for (_i = 0, _len = apps.length; _i < _len; _i++) {
    app = apps[_i];
    if (profile_id && profile_id !== app.profile_id) {
      throw "There are apps from different profiles";
    }
    if (!profile_id) {
      profile_id = app.profile_id;
    }
    appCharge = app.proRatedCost || app.billing.cost;
    billingApps[app.name] = appCharge;
    chargeAmount += appCharge;
  }
  chargeEvent = {
    date: new Date().getTime(),
    amount: chargeAmount,
    apps: billingApps,
    reason: reason
  };
  query = "update profiles set credits = " + substractFrom + " - $1 , bills = array_append(bills, $2) where id = $3";
  values = [chargeAmount, chargeEvent, profile_id];
  updateResponse = plv8.__execute(query, values);
  if (updateResponse.count === 0) {
    throw "Error: Could not update/find " + chargeAmount + " credits for profile " + app.user_name;
  }
  return apps;
};


},{}],25:[function(require,module,exports){
module.exports = function(app) {
  var no_user_name_error, response, wrong_key_error;
  wrong_key_error = "Error: Security Key does not match " + app.user_name + "   public or private keys";
  no_user_name_error = "Error: Request Body should have provided a user_name field and your developers public_dev_key for authentication";
  if (!app.user_name || !app.public_dev_key) {
    throw no_user_name_error;
  }
  response = plv8.__executeRow("select id,security from profiles where user_name = $1", [app.user_name]);
  if (response.security.public_dev_key !== app.public_dev_key) {
    throw wrong_key_error;
  }
  return response.id;
};


},{}],26:[function(require,module,exports){
var create, query;

query = " INSERT INTO profiles (user_name, credits, credits_to_reload, bills, contacts, marketing, security) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id";

create = function(profile) {
  var constants, defaultCredits, sqlResponse;
  constants = require("../").constants;
  defaultCredits = constants.DEFAULT_CREDITS;
  sqlResponse = plv8.__execute(query, [profile.user_name, profile.credits || defaultCredits, profile.credits_to_reload || defaultCredits, [], profile.contacts, profile.marketing, profile.security]);
  profile.id = sqlResponse[0].id;
  if (!profile.credits) {
    profile.credits = defaultCredits;
  }
  if (!profile.credits_to_reload) {
    profile.credits_to_reload = defaultCredits;
  }
  if (!profile.bills) {
    profile.bills = [];
  }
  return profile;
};

module.exports = create;

module.exports.query = query;


},{"../":32}],27:[function(require,module,exports){
var create, query;

query = "INSERT INTO stores (name, profile_id, apps, marketing, security) VALUES ($1, $2, $3, $4, $5) RETURNING id";

create = function(store) {
  var sqlResponse;
  sqlResponse = plv8.__execute(query, [store.name, store.profile_id, {}, {}, {}]);
  store.id = sqlResponse[0].id;
  return store;
};

module.exports = create;

module.exports.query = query;


},{}],28:[function(require,module,exports){
var destroy, query;

query = " DELETE from stores where name = $1 and profile_id = $2";

destroy = function(store) {
  var sqlResponse;
  sqlResponse = plv8.__execute(query, [store.user_name, store.profile_id]);
  if (sqlResponse !== 1) {
    throw "Could not delete store because it was not found";
  }
  return store;
};

module.exports = destroy;

module.exports.query = query;


},{}],29:[function(require,module,exports){
var handleResponseByType, query, queryApp, update;

query = "UPDATE stores SET apps = $1, marketing= $2, security= $3 where name = $4 and profile_id = $5;";

queryApp = "UPDATE stores SET apps = array_append(apps, $1) where name = $2 and profile_id = $3 returning apps;";

update = function(store, query) {
  var sqlResponse, values;
  values = store.apps && store.marketing && store.security ? values = [store.apps, store.marketing, store.security] : store.app ? (query = queryApp, console.log(store.app.id), values = [store.app.id, store.name, store.profile_id]) : void 0;
  sqlResponse = plv8.__execute(query, values);
  store = handleResponseByType(store, sqlResponse);
  return store;
};

handleResponseByType = function(store, response) {
  if (store.app) {
    store.apps = sqlResponse[0].apps;
  }
  return store;
};

module.exports = update;

module.exports.query = query;


},{}],30:[function(require,module,exports){
var billProfiles = require("../operations/profile_bill");

var log = require('3vot-db/logger').getLogger('busines_controller');

module.exports = function(request){
  var operation = null;
  if(request.params.operation == "bill") operation = billProfiles
  else{
    throw "Business Controller could not find what operation to execute " + request.params;
  }
  return operation;
}




},{"../operations/profile_bill":34,"3vot-db/logger":3}],31:[function(require,module,exports){
var createProfile = require("../operations/profile_create");
var createApp = require("../operations/app_create");
var createStore = require("../operations/store_create");
var deleteStore = require("../operations/store_delete");
var updateStore = require("../operations/store_update");


var log = require('3vot-db/logger').getLogger('rest_controller');

module.exports = function(request){
  var operation = null;
  if(request.params.object == "profiles" && request.params.operation == "create") operation = createProfile
  else if(request.params.object == "apps" && request.params.operation == "create") operation = createApp
  else if(request.params.object == "stores" && request.params.operation == "create") operation = createStore
  else if(request.params.object == "stores" && request.params.operation == "delete") operation = deleteStore
  else if(request.params.object == "stores" && request.params.operation == "update") operation = updateStore


  else{
    throw "Rest Controller could not find what operation to execute " + request.params;
  }
  return operation;
}
},{"../operations/app_create":33,"../operations/profile_create":35,"../operations/store_create":37,"../operations/store_delete":38,"../operations/store_update":39,"3vot-db/logger":3}],32:[function(require,module,exports){
var restController = require("./controllers/rest");
var businessController = require("./controllers/business");

var log = require('3vot-db/logger').getLogger('App_Index')

var controllers = {}

var constants = {
  DEFAULT_CREDITS: 15,
  OPEN_SOURCE_DISCOUNT: 0.50,
  SMALL_APP_COST: 5,
  REGULAR_APP_COST: 10,
  LARGE_APP_COST: 15
}

function registerControllers(){
  controllers["REST_CONTROLLER"] = restController;
  controllers["BUSINESS_CONTROLLER"] = businessController;
}

function controllerRouter(controllerName, request){
  registerControllers();
  if(!controllers[controllerName]) throw "Controller " + controllerName + " does not exist";
  var operation = controllers[controllerName](request);
  return execute(operation, request);
}


function execute(operation, request){
  var response = {};
  try{
    plv8.subtransaction( function(){    
      var operation_result = operation(request.body);
      response = {success: true, response: operation_result, message: '' };
    });
  } catch(e) {

    var response = {success: false, message: e.toString(), request: request, reason: e.stack };
    return response;
  }
  return response;
  
}

module.exports = {
  controllerRouter: controllerRouter,
  constants: constants
};
},{"./controllers/business":30,"./controllers/rest":31,"3vot-db/logger":3}],33:[function(require,module,exports){
var chargeApps, checkKeyAndFind, createApp, createEvent, defaultApp, execute, findAppByName, log, updateApp, updateCredits, updateVersion;

createApp = require('../commands/app_create_command');

updateApp = require('../commands/app_update_command');

checkKeyAndFind = require('../commands/profile_check_key_and_find_command');

chargeApps = require('../commands/profile_charge_apps_command');

updateCredits = require('../commands/app_update_credits_command');

log = require('3vot-db/logger').getLogger('app_create_operation');

execute = function(app) {
  var app_found;
  app_found = findAppByName(app);
  app = defaultApp(app, app_found);
  app.profile_id = checkKeyAndFind(app);
  app = updateCredits(app);
  if (app.billCredits) {
    app = chargeApps([app], false)[0];
  }
  app = updateVersion(app);
  app = createEvent(app);
  if (app_found !== null) {
    return updateApp(app);
  } else {
    return createApp(app);
  }
};

defaultApp = function(app, app_found) {
  if (!app.marketing) {
    app.marketing = {};
  }
  if (!app.billing) {
    app.billing = {
      events: {},
      cost: 0,
      last_cost: 0
    };
  }
  if (!app.version_details) {
    app.version_details = [];
  }
  if (!app.sales) {
    app.sales = {};
  }
  if (!app.events) {
    app.events = [];
  }
  app.billCredits = true;
  if (app_found) {
    app.old = app_found;
    app.billCredits = false;
    app.id = app_found.id;
    app.version = app_found.version;
    app.events = app_found.events;
    app.version_details = app_found.version_details;
    app.billing.events = app_found.billing.events;
    app.billing.last_cost = app_found.billing.last_cost;
    app.billing.cost = app_found.billing.cost;
    if (app_found.billing.size === "large" && (app.billing.size === "regular" || app.billing.size === "small")) {
      app.sizeReduced = true;
    } else if (app_found.billing.size === "regular" && app.billing.size === "small") {
      app.sizeReduced = true;
    } else if (app_found.billing.size === "small" && (app.billing.size === "regular" || app.billing.size === "large")) {
      app.sizeIncreased = true;
      app.billCredits = true;
    } else if (app_found.billing.size === "regular" && app.billing.size === "large") {
      app.sizeIncreased = true;
      app.billCredits = true;
    }
  }
  return app;
};

findAppByName = function(app) {
  return plv8.__executeRow("select id, billing, events,version_details, version from apps where name = $1", [app.name]);
};

updateVersion = function(app) {
  app.version++;
  app.version_details.push({
    developer: app.developer,
    when: Date.now()
  });
  return app;
};

createEvent = function(app) {
  var charge, charged, size, version;
  version = app.version || 1;
  size = "";
  charged = "";
  if (app.billCredits) {
    charge = " " + app.proRatedCost + " credits charged";
  }
  if (app.sizeIncreased || app.sizeDecreased) {
    if (app.sizeIncreased) {
      size = " app size increased to " + app.billing.size;
    }
    if (app.sizeDecreased) {
      size = " app size reduced to " + app.billing.size;
    }
  }
  app.events.push(app.developer + " deployed version " + version + ".0" + charged + size);
  return app;
};

module.exports = execute;


},{"../commands/app_create_command":21,"../commands/app_update_command":22,"../commands/app_update_credits_command":23,"../commands/profile_charge_apps_command":24,"../commands/profile_check_key_and_find_command":25,"3vot-db/logger":3}],34:[function(require,module,exports){
var chargeApps, execute, log;

log = require('3vot-db/logger').getLogger('profile_register_operation');

chargeApps = require('../commands/profile_charge_apps_command');

execute = function() {
  var app, appsInProfile, e, invoice, invoices, invoicesMap, profile, profileApps, profileObject, profiles, query, response, _i, _j, _k, _len, _len1, _len2, _results;
  query = "select * from invoices where paid_on > $1";
  invoices = plv8.__execute(query, [new Date()]);
  invoicesMap = {};
  for (_i = 0, _len = invoice.length; _i < _len; _i++) {
    invoice = invoice[_i];
    invoicesMap[invoice.profile_id] = invoice;
  }
  query = "select id,bills, user_name, credits, credits_to_reload, contacts from profiles where active = true";
  response = plv8.__execute(query);
  profiles = response.rows;
  appsInProfile = {};
  query = "select id,sales, billing, events, profile_id,name from apps where active = true";
  response = plv8.__execute(query);
  profiles = response.rows;
  for (_j = 0, _len1 = apps.length; _j < _len1; _j++) {
    app = apps[_j];
    profileObject = appsInProfile[app.profile_id];
    if (!profileObject) {
      profileObject = [];
    }
    profileObject.push(app);
    appsInProfile[app.profile_id] = profileObject;
  }
  _results = [];
  for (_k = 0, _len2 = profiles.length; _k < _len2; _k++) {
    profile = profiles[_k];
    profileApps = appsInProfile[profile.id];
    if (profileApps) {
      try {
        _results.push(chargeApps(profileApps));
      } catch (_error) {
        e = _error;
        _results.push(console.log("Profile " + profile.id + " does not have enought credits for apps " + e.toString()));
      }
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

module.exports = execute;


},{"../commands/profile_charge_apps_command":24,"3vot-db/logger":3}],35:[function(require,module,exports){
var createProfile, execute, log, randomString;

log = require('3vot-db/logger').getLogger('profile_register_operation');

createProfile = require("../commands/profile_create_command");

execute = function(profile) {
  profile.security.public_dev_key = randomString(15, '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.');
  profile = createProfile(profile);
  return profile;
};

randomString = function(length, chars) {
  var i, result;
  result = '';
  i = length;
  while (i > 0) {
    result += chars[Math.round(Math.random() * (chars.length - 1))];
    i--;
  }
  return result;
};

module.exports = execute;


},{"../commands/profile_create_command":26,"3vot-db/logger":3}],36:[function(require,module,exports){
var checkKeyAndFind, execute, findStoreByNameAndProfile, log, updateStore;

updateStore = require('../commands/store_update_command');

checkKeyAndFind = require('../commands/profile_check_key_and_find_command');

log = require('3vot-db/logger').getLogger('store_add_app_operation');

execute = function(store) {
  store.profile_id = checkKeyAndFind(store);
  store.app = findStoreByNameAndProfile(store);
  store = updateStore(store);
  return store;
};

findStoreByNameAndProfile = function(store) {
  var app, query;
  query = "select id from apps where name = $1 and profile_id = $2";
  app = plv8.__executeRow(query, [store.app, store.profile_id]);
  return app;
};

module.exports = execute;


},{"../commands/profile_check_key_and_find_command":25,"../commands/store_update_command":29,"3vot-db/logger":3}],37:[function(require,module,exports){
var checkKeyAndFind, createStore, execute, log;

createStore = require('../commands/store_create_command');

checkKeyAndFind = require('../commands/profile_check_key_and_find_command');

log = require('3vot-db/logger').getLogger('store_create_operation');

execute = function(store) {
  store.profile_id = checkKeyAndFind(store);
  store = createStore(store);
  return store;
};

module.exports = execute;


},{"../commands/profile_check_key_and_find_command":25,"../commands/store_create_command":27,"3vot-db/logger":3}],38:[function(require,module,exports){
var checkKeyAndFind, deleteStore, execute, log;

deleteStore = require('../commands/store_delete_command');

checkKeyAndFind = require('../commands/profile_check_key_and_find_command');

log = require('3vot-db/logger').getLogger('store_create_operation');

execute = function(store) {
  store.profile_id = checkKeyAndFind(store);
  deleteStore(store);
  return {};
};

module.exports = execute;


},{"../commands/profile_check_key_and_find_command":25,"../commands/store_delete_command":28,"3vot-db/logger":3}],39:[function(require,module,exports){
var addApp, execute, log;

addApp = require('./store_add_app');

log = require('3vot-db/logger').getLogger('store_update_operation');

execute = function(store) {
  if (store.app) {
    return addApp(store);
  }
};

module.exports = execute;


},{"./store_add_app":36,"3vot-db/logger":3}],40:[function(require,module,exports){
require('3vot-db/plv8-fill');

console = require('3vot-db/console');
App = require('./app');


},{"./app":32,"3vot-db/console":2,"3vot-db/plv8-fill":11}],"./test":[function(require,module,exports){
module.exports=require('kQ629X');
},{}],"kQ629X":[function(require,module,exports){
var spec = require('3vot-db/microspec');
spec.options({
  sourceLineOffset: 7,
  contextLines: 5
});

exports.run = function() {
  spec.addGlobals(['require', 'App', 'console']);
  require('./profileSpec');
  spec.run();
};

},{"./profileSpec":45,"3vot-db/microspec":4}],"./test/microspec":[function(require,module,exports){
module.exports=require('Zv8T+a');
},{}],"Zv8T+a":[function(require,module,exports){
module.exports = require('3vot-db/microspec');

},{"3vot-db/microspec":4}],45:[function(require,module,exports){
var app = require('../app');
var spec = require('./microspec');
var assert = require('assert');



spec('addProfile', {
  'should add a profile for mario from sql execute': function() {
    var request = '{ "params": { "object": "profiles", "operation": "create" }, "body": { "user_name": "mario", "contacts" :  { "owner": { "email": "mvargas@ddd.com" , "password": "12345" }, "billing": {}, "marketing": {} },  "marketing":  { "name": "Mario Producciones" } , "security":  { "public_dev_key": "abcdefg" } } }'
    var query = "select controller('REST_CONTROLLER' , '" + request  + "' )"
    console.log(query);
    var response = plv8.execute(query);
    assert(!response[0].controller.success);
  }
});

},{"../app":32,"./microspec":"Zv8T+a","assert":14}]},{},[40,"kQ629X"])$PLV8$ LANGUAGE plv8;

/* TODO: add Function declarations here */

/*
CREATE OR REPLACE FUNCTION app_hello(name text) RETURNS text AS $$
  return App.example.hello(name);
$$ LANGUAGE plv8 IMMUTABLE STRICT;
*/


